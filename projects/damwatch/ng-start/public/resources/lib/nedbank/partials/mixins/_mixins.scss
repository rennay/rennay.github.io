/* --------------------
------- Mixins --------
-------------------- */

@mixin vendor-prefixes($property, $value) {
	-webkit-#{$property}: $value;
	-moz-#{$property}: $value;
	-ms-#{$property}: $value;
	-o-#{$property}: $value;
}

/* Transitions */

@mixin transition($transition...) {
	-moz-transition: $transition;
	-o-transition: $transition;
	-webkit-transition: $transition;
	transition: $transition;
}

/* Transform */

@mixin transform($transform...) {
	-moz-transform: $transform;
	-o-transform: $transform;
	-webkit-transform: $transform;
	transform: $transform;
}

/* Fonts */

@function str-replace($string, $search, $replace: "") {
	$index: str-index($string, $search);

	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}

	@return $string;
}

/* Font Face */

@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
	$src: null;

	$extmods: (
		eot: "?",
		svg: "#" + str-replace($name, " ", "_")
	);

	$formats: (
		otf: "opentype",
		ttf: "truetype"
	);

	@each $ext in $exts {
		$extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
		$format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
		$src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
	}

	@font-face {
		font-family: quote($name);
		font-style: $style;
		font-weight: $weight;
		src: $src;
	}
}

/* Gradients */

@mixin linear-gradient($direction, $color-stops...) {
	/* Direction has been omitted and happens to be a color-stop */
	@if is-direction($direction) == false {
		$color-stops: $direction, $color-stops;
		$direction: 180deg;
	}

	background: nth(nth($color-stops, 1), 1);
	background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
	background: linear-gradient($direction, $color-stops);
}

@function is-direction($value) {
	$is-keyword: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
	$is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

	@return $is-keyword or $is-angle;
}

@function legacy-direction($value) {
	@if is-direction($value) == false {
		@error "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.";
	}

	$conversion-map: (
		to top          : bottom,
		to top right    : bottom left,
		to right top    : left bottom,
		to right        : left,
		to bottom right : top left,
		to right bottom : left top,
		to bottom       : top,
		to bottom left  : top right,
		to left bottom  : right top,
		to left         : right,
		to left top     : right bottom,
		to top left     : bottom right
	);

	@if map-has-key($conversion-map, $value) {
		@return map-get($conversion-map, $value);
	}

	@return 90deg - $value;
}

/* Component query */

@mixin cq-prolyfill($query) {
	&#{cq-prolyfill($query)} {
		@content;
	}
}

@function cq-prolyfill($query) {
	@return unquote(".\\:container\\(" + cq-prolyfill-escape(cq-prolyfill-strip-spaces(to-lower-case($query))) + "\\)");
}

@function cq-prolyfill-add-backslash($string, $search) {
	$index: str-index($string, $search);

	@while $index {
		$string: str-insert($string, '\\', $index);

		$newIndex: if(
			str-length($string) < $index + 2,
			null,
			str-index(str-slice($string, $index + 2), $search)
		);
		$index: if($newIndex, $index + 1 + $newIndex, null);
	}
	@return $string;
}

@function cq-prolyfill-remove($string, $search) {
	$index: str-index($string, $search);

	@while $index {
		$string: str-slice($string, 1, $index - 1) + str-slice($string, $index + 1);
		$index: str-index($string, $search);
	}
	@return $string;
}

@function cq-prolyfill-escape($string) {
	@each $char in '[' ']' '!' '"' '#' '$' '%' '&' "'" '(' ')' '*' '+' ',' '.' '/' ':' ';' '<' '=' '>' '?' '@' '^' '`' '{' '|' '}' '~' {
		$string: cq-prolyfill-add-backslash($string, $char);
	}
	@return $string;
}

@function cq-prolyfill-strip-spaces($string) {
	/* tab, line feed, carriage return and space */

	$chars: "\9\a\d\20";

	@for $i from 1 through str-length($chars) {
		$string: cq-prolyfill-remove(
			$string,
			str-slice($chars, $i, $i)
		);
	}
	@return $string;
}
